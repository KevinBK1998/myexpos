alias userSP R0;
userSP=SP;
alias fcode R1;
fcode=[[PTBR + 2 * (userSP - 5)/ 512] * 512 + (userSP - 5) % 512];
[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13]=SP;
SP=[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 11]*512-1;
[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 9]=fcode;
alias rAdd R2;
rAdd=[PTBR + 2 * (userSP - 1)/ 512] * 512 + (userSP - 1) % 512;
alias id R3;
id=[[PTBR + 2 * (userSP - 4)/ 512] * 512 + (userSP - 4) % 512];
alias i R4;
i=[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 11]*512+RESOURCE_TABLE_OFFSET+id*2;
breakpoint;
if(id>7||id<0||[i]!=SEMAPHORE)then
    [rAdd]=-1;
    SP=userSP;
    [PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 9]=0;
    ireturn;
endif;
alias ind R4;
ind=[ind+1];
if(fcode==19)then       //Semlock
    breakpoint;
    while([SEMAPHORE_TABLE+ind*4]!=-1 && [SEMAPHORE_TABLE+ind*4]!=[SYSTEM_STATUS_TABLE+1])do
        [PROCESS_TABLE +16*[SYSTEM_STATUS_TABLE+1]+4]=WAIT_SEMAPHORE;
        [PROCESS_TABLE +16*[SYSTEM_STATUS_TABLE+1]+5]=ind;
        multipush(R0,R1,R2,R3,R4);
        call SCHEDULER;
        multipop(R0,R1,R2,R3,R4);
    endwhile;
    [SEMAPHORE_TABLE+ind*4]=[SYSTEM_STATUS_TABLE+1];
    [rAdd]=0;
else if(fcode==20)then  //Semunlock
    if([SEMAPHORE_TABLE+ind*4]!=-1)then
        if([SEMAPHORE_TABLE+ind*4]!=[SYSTEM_STATUS_TABLE+1])then
            [rAdd]=-2;
            SP=userSP;
            [PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 9]=0;
            ireturn;
        endif;
        breakpoint;
        [SEMAPHORE_TABLE+ind*4]=-1;
        alias i R3;    
        i=0;
        while(i<16)do
            if([PROCESS_TABLE +16*i+4]==WAIT_SEMAPHORE&&[PROCESS_TABLE +16*i+5]==ind)then
                [PROCESS_TABLE +16*i+4]=READY;
                break;
            endif;
            i=i+1;
        endwhile;
        [rAdd]=0;
    endif;
endif;
endif;
SP=userSP;
[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 9]=0;
ireturn;