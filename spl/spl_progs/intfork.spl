[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 9]=8;
[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13]=SP;
alias userSP R0;
userSP=SP;
SP=[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 11]*512-1;
multipush(R0);
R1=1;
call PROCESS_MANAGER;
R1=R0;
multipop(R0);
alias kPID R1;
if(kPID==-1)then
    [([PTBR + 2 * ((userSP - 1)/ 512)] * 512) + (userSP - 1) % 512]=-1;
    SP=userSP;
    [PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 9]=0;
    ireturn;
endif;
alias i R2;
//Heap
if([PAGE_TABLE_BASE+[SYSTEM_STATUS_TABLE+1]*20+4]==-1)then    
    i=PAGE_TABLE_BASE+[SYSTEM_STATUS_TABLE+1]*20+4;
    while(i<PAGE_TABLE_BASE+[SYSTEM_STATUS_TABLE+1]*20+8)do
        multipush(R0,R1,R2);    
        R1=1;
        call MEMORY_MANAGER;
        R3=R0;
        multipop(R0,R1,R2);
        [i]=R3;
        [i+1]="0110";
        i=i+2;
    endwhile;
endif;
//Stack
i=PAGE_TABLE_BASE+kPID*20+16;
while(i<PAGE_TABLE_BASE+(kPID+1)*20)do
    multipush(R0,R1,R2);    
    R1=1;
    call MEMORY_MANAGER;
    R3=R0;
    multipop(R0,R1,R2);
    [i]=R3;
    i=i+2;
endwhile;
//User Area Page
multipush(R0,R1);    
R1=1;
call MEMORY_MANAGER;
R4=R0;
multipop(R0,R1);
//copy process table
i=PROCESS_TABLE + ( kPID * 16);
alias j R3;
j=PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE+1] * 16) ;
//Copy process table
[i + 3]=[j + 3];
[i + 6]=[j + 6];
[i + 7]=[j + 7];
[i + 10]=[j + 10];
[i + 13]=[j + 13];
//Initialise other values-process table
[i]=0;
[i + 2]=[SYSTEM_STATUS_TABLE+1];
[i + 4]=CREATED;
[i + 9]=0;
[i+ 11]=R4;
[i + 12]=0;
//Resource table
i=[i + 11]*512+RESOURCE_TABLE_OFFSET;
j=[j + 11]*512+RESOURCE_TABLE_OFFSET;
while(i<([PROCESS_TABLE + ( kPID * 16) + 11]+1)*512)do
    [i]=[j];
    if([i]==SEMAPHORE)then
        [SEMAPHORE_TABLE+[i+1]*4+1]=[SEMAPHORE_TABLE+[i+1]*4+1]+1;
    endif;
    if([i]==FILE)then
        [OPEN_FILE_TABLE+[i+1]*4+1]=[OPEN_FILE_TABLE+[i+1]*4+1]+1;
    endif;
    i=i+2;
    j=j+2;
endwhile;
//Disk Map Table
i=DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE+1]*10;
j=DISK_MAP_TABLE + kPID*10;
while(j<DISK_MAP_TABLE  + ( kPID +1)* 10)do
    [j]=[i];
    i=i+1;
    j=j+1;
endwhile;
//Page Table-Library,Heap,Code
i=PAGE_TABLE_BASE+20*[SYSTEM_STATUS_TABLE+1];
j=PAGE_TABLE_BASE+20*kPID;
while(j<PAGE_TABLE_BASE+20*kPID+16)do
    [j]=[i];
    if([j]!=-1&&j%2==0)then
        [MEMORY_FREE_LIST+[j]]=[MEMORY_FREE_LIST+[j]]+1;
    endif;
    i=i+1;
    j=j+1;
endwhile;
//Stack
i=PAGE_TABLE_BASE+20*[SYSTEM_STATUS_TABLE+1]+17;
j=PAGE_TABLE_BASE+20*kPID+17;
[j]=[i];
[j+2]=[i+2];
//Copy Stack Contents
i=[PAGE_TABLE_BASE + ( [SYSTEM_STATUS_TABLE+1] * 20) + 16]*512;
j=[PAGE_TABLE_BASE + ( kPID * 20) + 16]*512;
while(j<([PAGE_TABLE_BASE + ( kPID * 20) + 16]+1)*512)do
    [j]=[i];
    i=i+1;
    j=j+1;
endwhile;
i=[PAGE_TABLE_BASE + ( [SYSTEM_STATUS_TABLE+1] * 20) + 18]*512;
j=[PAGE_TABLE_BASE + ( kPID * 20) + 18]*512;
while(j<([PAGE_TABLE_BASE + ( kPID * 20) + 18]+1)*512)do
    [j]=[i];
    i=i+1;
    j=j+1;
endwhile;
[[PROCESS_TABLE + ( kPID * 16) + 11] * 512 ]=BP;
[([PTBR + 2 * ((userSP - 1)/ 512)] * 512) + (userSP - 1) % 512]=kPID;
[([PAGE_TABLE_BASE+20*kPID + 2 * ((userSP - 1)/ 512)] * 512) + (userSP - 1) % 512]=0;
[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 9]=0;
SP=userSP;
ireturn;