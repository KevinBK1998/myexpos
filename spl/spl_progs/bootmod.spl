loadi(63,13);   //Library
loadi(64,14);
loadi(65,7);    //INIT
loadi(66,8);
loadi(22,35);   //Exit
loadi(23,36);
loadi(32,45);   //Shutdown
loadi(33,46);
loadi(59,3);    //Inode
loadi(60,4);
loadi(20,33);   //Execute
loadi(21,34);
loadi(18,31);   //Fork
loadi(19,32);
loadi(28,41);   //Semaphore 
loadi(29,42);
loadi(30,43);   //Semaphore Locking
loadi(31,44);
loadi(24,37);   //Process Synchronisation
loadi(25,38);
loadi(2,15);    //Exception
loadi(3,16);
loadi(4,17);    //Timer
loadi(5,18);
loadi(8,21);    //Console
loadi(9,22);
loadi(6,19);    //Disk
loadi(7,20);
loadi(16,29);   //Write
loadi(17,30);
loadi(14,27);   //Read
loadi(15,28);
loadi(50,63);   //Schedule
loadi(51,64);
loadi(40,53);   //Resource
loadi(41,54);
loadi(48,61);   //Device
loadi(49,62);
loadi(42,55);   //Process
loadi(43,56);
loadi(44,57);   //Memory
loadi(45,58);
loadi(61,2);    //Disk Free List
[TERMINAL_STATUS_TABLE]=0;
[DISK_STATUS_TABLE]=0;
alias pte R0;
pte=80*512+RESOURCE_TABLE_OFFSET;
while(pte<81*512)do
    [pte]=-1;
    pte=pte+2;
endwhile;
pte=PROCESS_TABLE+ 4;
while(pte<PROCESS_TABLE+16*16)do
    [pte]=TERMINATED;
    pte=pte+16;
endwhile;
pte = PAGE_TABLE_BASE+20;
[pte+0] = 63;    //Library
[pte+1] = "0100";
[pte+2] = 64;
[pte+3] = "0100";
[pte+4] = 78;    //Heap
[pte+5] = "0110";
[pte+6] = 79;
[pte+7] = "0110";
[pte+8] = 65;    //Code
[pte+9] = "0100";
[pte+10] = 66;
[pte+11] = "0100";
[pte+12] = -1;
[pte+13] = "0000";
[pte+14] = -1;
[pte+15] = "0000";
[pte+16] = 76;   //Stack
[pte+17] = "0110";
[pte+18] = 77;
[pte+19] = "0110";
[PROCESS_TABLE +16+ 11] = 80;
[PROCESS_TABLE +16+ 1] = 1;
[PROCESS_TABLE +16+ 4] = CREATED;
[PROCESS_TABLE +16+ 13] = 8*512;
[PROCESS_TABLE +16+ 12] = 0;
[PROCESS_TABLE +16+ 14] = PAGE_TABLE_BASE+20;
[PROCESS_TABLE +16+ 15] = 10;
[76*512] = [65*512+1];
alias i R0;
i=SEMAPHORE_TABLE;
while(i<SEMAPHORE_TABLE+MAX_SEM_COUNT*4)do
    [i]=-1;
    [i+1]=0;
    i=i+4;
endwhile;
i=DISK_MAP_TABLE+10;
while(i<DISK_MAP_TABLE+2*10)do
    [i]=-1;
    i=i+1;
endwhile;
[DISK_MAP_TABLE+10+4]=7;
[DISK_MAP_TABLE+10+5]=8;
i=MEMORY_FREE_LIST;
while(i<MEMORY_FREE_LIST+83)do
    [i]=1;
    i=i+1;
endwhile;
while(i<MEMORY_FREE_LIST+128)do
    [i]=0;
    i=i+1;
endwhile;
i=MEMORY_FREE_LIST;
alias freeno R1;
freeno=0;
while(i<MEMORY_FREE_LIST+128)do
    if([i]==0)then
        freeno=freeno+1;
    endif;
    i=i+1;
endwhile;

[SYSTEM_STATUS_TABLE+2]=freeno;
[SYSTEM_STATUS_TABLE+3]=0;
return;