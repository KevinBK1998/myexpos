alias userSP R0;
userSP=SP;
alias fcode R1;
fcode=[[PTBR + 2 * (userSP - 5)/ 512] * 512 + (userSP - 5) % 512];
[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13]=SP;
SP=[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 11]*512-1;
alias rAdd R2;
rAdd=[PTBR + 2 * (userSP - 1)/ 512] * 512 + (userSP - 1) % 512;
if(fcode==11)then       //Getpid
    [rAdd]=[SYSTEM_STATUS_TABLE+1];
else if(fcode==12)then  //Getppid
    [rAdd]=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1] * 16+2];
else if(fcode==13)then  //Wait
    [PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 9]=fcode;
    alias pid R3;
    pid=[[PTBR + 2 * (userSP - 4)/ 512] * 512 + (userSP - 4) % 512];
    if(pid==[SYSTEM_STATUS_TABLE+1]||pid<0||pid>15||[PROCESS_TABLE+pid*16+4]==TERMINATED)then
        [rAdd]=-1;
        SP=userSP;
        [PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 9]=0;
        ireturn;
    endif;
    [PROCESS_TABLE +[SYSTEM_STATUS_TABLE+1]*16+4]=WAIT_PROCESS;
    [PROCESS_TABLE +[SYSTEM_STATUS_TABLE+1]*16+5]=pid;
    multipush(R0,R2);
    call SCHEDULER;
    multipop(R0,R2);
    [rAdd]=0;
else if(fcode==14)then  //Signal
    [PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 9]=fcode;
    alias i R3;    
    i=0;
    while(i<16)do
        if([PROCESS_TABLE +16*i+4]==WAIT_PROCESS&&[PROCESS_TABLE +16*i+5]==[SYSTEM_STATUS_TABLE+1])then
            [PROCESS_TABLE +16*i+4]=READY;
            break;
        endif;
        i=i+1;
    endwhile;
    [rAdd]=0;
endif;
endif;
endif;
endif;
SP=userSP;
[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 9]=0;
ireturn;